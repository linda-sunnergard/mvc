{% extends "base.html.twig" %}

{% block title %}Kodkvalitet{% endblock %}

{% block body %}
<main class="container">
    <article>
        <h1>Kodkvalitet</h1>
        <h2>Introduktion</h2>
        <p>I denna analys kommer jag använda mig utav PHPMetrics och Scrutinizer för att ser över min kod. Jag kommer i första hand analysera den kod som jag själv skrivit under kursens gång (de klasser som hör till kortleken, kortspelet och biblioteket).</p>
        <h3>Coverage</h3>
        <p>Coverage handlar om hur stor del av koden som "täcks" utav olika testfall. Testas alla olika möjliga utfall i klassernas metoder? En hög kodtäckning innebär att så är fallet, vilket i sin tur innebär att det går att vara mer säker på att koden verkligen fungerar som tänkt.</p>

        <h3>Complexity</h3>
        <p>Complexity är ungefär vad det låter som. Det handlar om hur komplex koden är. Mer komplex kod kräver bland annat fler testfall. Den kan även vara svårare att underhålla och utveckla, vilket på sikt kan bli problematiskt.</p>

        <h3>Cohesion</h3>
        <p>Cohesion syftar till hur väl koden i exempelvis en klass hänger ihop. En låg cohesion indikerar att en klass utför flera olika saker som kanske inte nödvändigtvis hör ihop. Det kan indikera att klassen bör delas upp i mindre klasser.</p>

        <h3>Coupling</h3>
        <p>Det finns två typer av coupling. Det finns afferent coupling, som syftar till utgående "kopplingar". Alltså att en klass används av många andra klasser. Det finns även efferent coupling, som syftar till inkommande "kopplingar". Alltså att en klass används av många andra klasser.</p>

        <h3>Codestyle</h3>
        <p>Kodstil relaterar till hur man skriver "snygg" kod. Till exempel gällande hur man ska använda sig av white spaces, tabs, vertical alignment, hur/var kommentarer ska skrivas och så vidare. Helt enkelt hur koden visuellt ska se ut för att öka läsbarheten.</p>

        <h3>CRAP</h3>
        <p>Change Risk Analyzer and Predictor (CRAP) handlar om komplexa metoder och testning utav dessa. Om en metod är komplext, bör den även ha många tests kopplade till sig som testar olika utfall. Detta för att säkerställa att koden beter sig som förväntat.</p>

        <h2>Phpmetrics</h2>
        <h3>Coverage</h3>
        <p>De klasser som jag har skrivit enhetstest för är: Card, CardGraphic, CardHand, DeckOfCards, DrawResponse, Player, Bank, Game. Rapporten visar att alla dessa klasser blir anropade utav mina test suites. En möjlig nackdel är att det är svårt att testa klasserna enskilt. Till exempel CardHand innehåller en array med Card(s). Genom att testa CardHand anropas/används även Card och CardGraphic. Så är det för de flesta utav klasserna som testas.</p>

        <h3>Complexity</h3>
        <a href="{{ asset('img/phpmetrics_complexity.png') }}">
            <img class='imageMetrics' src='img/phpmetrics_complexity.png' alt='PHPMetrics Complexity'>
        </a>
        <p>Utifrån rapporten gällande komplexitet verkar det som att klasserna DeckOfCards, Game och JsonController är de mest komplexa. Till exempel JsonController har ett mätvärde på 17 gällande weighted method count, och 529,41 på relative system complexity. Även övriga controllers ter sig relativt komplexa, troligen på grund av att de är sammanlänkade med så många andra klasser. Detta kommer göra dem svåra att underhålla och uppdatera över tid. Om en klass ändras, kommer de i sin tur inte fungera som det är tänkt.</p>

        <h3>Cohesion</h3>
       <a href="{{ asset('img/phpmetrics_cohesion.png') }}">
            <img class='imageMetrics' src='img/phpmetrics_cohesion.png' alt='PHPMetrics Cohesion'>
        </a>
        <p>Den klassen som har högst värde på Lack of Cohesion of Methods (LCOM) är JsonController, som får mätvärdet nio. Det är på sätt och vis förståeligt då denna kontroller interagerar med många andra klasser för att möjliggöra Json Api. Även om den visserligen "bara" är till för just Json Api, blir det spretigt i och med att den samarbetar med så många olika delar av koden.</p>

        <h3>Coupling</h3>
        <a href="{{ asset('img/phpmetrics_acoupling.png') }}">
            <img class='imageMetrics' src='img/phpmetrics_acoupling.png' alt='PHPMetrics Afferent Coupling'>
        </a>
        <a href="{{ asset('img/phpmetrics_ecoupling.png') }}">
            <img class='imageMetrics' src='img/phpmetrics_ecoupling.png' alt='PHPMetrics Efferent Coupling'>
        </a>
        <p>Det framkommer att klasserna Card, CardHand och DeckOfCards alla har tre utgående (afferent) kopplingar. Troligtvis är dessa tre nystade ganska väl tillsammans. Exempelvis klassen Card ingår bland annat i CardHand och i DeckOfCards. Gällande inkommande (efferent) kopplingar har alla olika Controller(s) mellan 4-8 kopplingar. Klassen Game är den klass som inte är en controller som har flest inkommande kopplingar, nämligen fem. Det gör den möjligen relativt sårbar då den kommer påverkas om andra delar av koden ändras.</p>

        <h3>Violations</h3>
        <p>JsonController får varningar för att den troligen är buggad och räknas som ett "God class". Den har för många publika metoder, använder sig av många externa klasserna och har en låg cohesion.</p>

        <h2>Scrutinizer</h2>
        <h3>Badges</h3>
        <a href="https://scrutinizer-ci.com/g/linda-sunnergard/mvc/?branch=main">
            <img src="https://scrutinizer-ci.com/g/linda-sunnergard/mvc/badges/quality-score.png?b=main" alt="Badge Scrutinizer">
        </a>

        <a href="https://scrutinizer-ci.com/g/linda-sunnergard/mvc/?branch=main">
            <img src="https://scrutinizer-ci.com/g/linda-sunnergard/mvc/badges/coverage.png?b=main" alt="Badge coverage">
        </a>

        <a href="https://scrutinizer-ci.com/g/linda-sunnergard/mvc/?branch=main">
            <img src="https://scrutinizer-ci.com/g/linda-sunnergard/mvc/badges/build.png?b=main" alt="Badge build">
        </a>

        <a href="https://scrutinizer-ci.com/g/linda-sunnergard/mvc/?branch=main">
            <img src="https://scrutinizer-ci.com/g/linda-sunnergard/mvc/badges/code-intelligence.svg?b=main" alt="Badge code intelligence">
        </a>

        <h3>Coverage</h3>
        <a href="{{ asset('img/scrutinizer_coverage.png') }}">
            <img class='imageMetrics' src='img/scrutinizer_coverage.png' alt='Scrutinizer coverage'>
        </a>
        <p>Genom att endast se över badge "coverage" ser det inte särskilt bra ut med endast 20%. Genom att däremot se över de klasser som testen är skrivna för ser det bättre ut. En möjlig förbättring skulle däremot givetvis kunna vara att skriva fler tester eller skriva tester för exempelvis controllers.</p>

        <h3>Complexity</h3>
        <a href="{{ asset('img/scrutinizer_complexity.png') }}">
            <img class='imageMetrics' src='img/scrutinizer_complexity.png' alt='Scrutinizer complexity'>
        </a>
        <p>Utav de klasser jag själv skrivit (inte del av tidigare övningar) framkommer att DeckOfCards, JsonController och Game är de mest komplexa klasserna. Detta har troligen att göra med att de är beroende av andra klasser. JsonController har även relativt många publika metoder.</p>

        <h3>CRAP</h3>
        <a href="{{ asset('img/scrutinizer_crap.png') }}">
            <img class='imageMetrics' src='img/scrutinizer_crap.png' alt='Scrutinizer CRAP'>
        </a>
        <p>Metoderna playerWins, apiDeckDrawMany och drawPost är de funktioner som har högst CRAP-värde. Vilket troligen innebär att de behöver ha fler tester med olika testfall för att få ner värdet. playerWins ingår i klassen Game som det finns tester för, så möjligen skulle en förbättring kunna vara att skriva fler tester för denna metod.</p>

        <h3>Size</h3>
        <a href="{{ asset('img/scrutinizer_size.png') }}">
            <img class='imageMetrics' src='img/scrutinizer_size.png' alt='Scrutinizer size'>
        </a>
        <p>Såväl JsonController som BookController är något stora och skulle möjligen kunna delas upp i mindre delar för att minska storleken och komplexiteten.</p>

        <h3>Issues</h3>
        <a href="{{ asset('img/scrutinizer_issues.png') }}">
            <img class='imageMetrics' src='img/scrutinizer_issues.png' alt='Scrutinizer issues'>
        </a>
        <p>Det finns fem issues kopplade till den koden som jag har skrivit. Vid en översikt verkar det handla om best practice, och möjliga buggar.</p>

        <h2>Förbättringar</h2>
        <h3>Förbättring nr 1: Dela upp JsonController i mindre klasser</h3>
        <h4>Före</h4>
        <p>JsonController är den klass som verkar dyka upp oftast i olika rapporter. Både när det gäller complexity, LCOM, efferent coupling, size och violations dyker den klassen upp. Jag tror att detta till stor del går att fixa genom att behålla koden, men helt enkelt dela upp den i mindre delar.</p>
        <h4>Efter</h4>
        <a href="{{ asset('img/phpmetrics_complexity_after1.png') }}">
            <img class='imageMetrics' src='img/phpmetrics_complexity_after1.png' alt='Scrutinizer complexity1 after'>
        </a>
        <a href="{{ asset('img/phpmetrics_complexity_after2.png') }}">
            <img class='imageMetrics' src='img/phpmetrics_complexity_after2.png' alt='Scrutinizer complexity2 after'>
        </a>
        <a href="{{ asset('img/phpmetrics_complexity_after3.png') }}">
            <img class='imageMetrics' src='img/phpmetrics_complexity_after3.png' alt='Scrutinizer complexity3 after'>
        </a>
&nbsp;
        <a href="{{ asset('img/phpmetrics_coupling_after.png') }}">
            <img class='imageMetrics' src='img/phpmetrics_coupling_after.png' alt='Scrutinizer coupling after'>
        </a>
&nbsp;
        <a href="{{ asset('img/phpmetrics_lcom_after.png') }}">
            <img class='imageMetrics' src='img/phpmetrics_lcom_after.png' alt='Scrutinizer LCOM after'>
        </a>
        <p>Klassen delades upp i två klasser; JsonController som innehåller övningar under kursen och API relaterat till biblioteket, samt JsonCardController som innehåller API relaterat till kortleken och kortspelet. Detta verkar innebära att båda klasserna har en mindre komplexitet. Deras respektive LCOM-värde är lägre och flera andra värder gällande komplexitet så som WMC och relative system complexity. Varken JsonController eller JsonCardController räknas längre som en "god class" i violations. Däremot har inte efferent coupling förbättrats särskilt mycket, som är 7 för JsonCardController och 4 för JsonController.</p>

        <h3>Förbättring nr 2: Åtgärda issues i Scrutinizer</h3>
        <h4>Före</h4>
        <p>Jag upplever att framförallt Scrutinizer ger konkreta orsaker och förslag till de issues som tas upp, vilket är nio till antalet. Därför tänker jag att jag ska se över om jag inte kan åtgärda dessa och på så sätt få generellt bättre och tydligare kod. En del issues är dock kopplade till kod jag inte skrivit som en del av projektet, och jag tänker därför rikta in mig på det jag själv skrivit.</p>
        <h4>Efter</h4>
        <p>Tre issues gick relativt enkelt att åtgärda då det framförallt handlade om att Scrutinizer föreslog === istället för ==. Så det totala antalet issues gick ner till sex, varav fyra är relaterade till kod jag själv inte skrivit (i filerna Kernel.php och .php-cs-fixer.dist.php).</p>

        <h3>Förbättring nr 3: Se över tester för metoder playerWins()</h3>
        <h4>Före</h4>
        <p>I min egen kod kan jag se att jag har skrivit tester för playerWins(), men Scrutinizer klagar på att så ej är fallet. Jag antar att mina tester inte exekvifieras så som jag tror och en förbättring är därmed att se till att testerna fungerar så som jag vill.</p>
        <h4>Efter</h4>
        <a href="{{ asset('img/scrutinizer_coverage_after.png') }}">
            <img class='imageMetrics' src='img/scrutinizer_coverage_after.png' alt='Scrutinizer coverage after'>
        </a>
&nbsp;
        <a href="{{ asset('img/scrutinizer_crap_after.png') }}">
            <img class='imageMetrics' src='img/scrutinizer_crap_after.png' alt='Scrutinizer CRAP after'>
        </a>
        <p>Tidigare hade jag delat upp testerna för Game-klassen i två klasser, GameTest och GameTestWinner. GameTestWinner skulle endast testa playerWins(), men det visade sig att dessa inte exekvifierades. Anledningen till att jag hade gjort det var för att lintern klagade på att GameTest hade för många publika metoder annars. Jag valde dock att ignorera det och ha alla tester för Game-klassen i en testklass. Nu utförs alla tester enligt plan, och testtäckningen har förbättrats. Detta har även inneburit att playerWins() CRAP-värde har förbättrats.</p>

        <h2>Diskussion</h2>
        <p>Jag tror detta kan vara ett sätt att arbeta med kodkvalitet. Det kan vara svårt att få en bra överblick själv över sin kod. Man ser inte skogen för alla träd och så vidare. Så att få konkreta mätvärden är ett bra sätt att se luckor, missar och misstag som kan behöva åtgärdas. De nackdelar som jag upplevde var dels att man får nästan för många siffror. Det är svårt att ta in alla kodanalyser man får fram, vad de betyder, vad det skulle innebära att försöka åtgärda dem och om det ens behövs. Den andra nackdelen var att jag upplevde att när jag åtgärdade ett fel i PHPMetrics/Scrutinizer så klagade litern på att jag har för många publika metoder i en klass. Så där upplevde jag att de arbetade mot varandra. En annan nackdel kan vara att man kanske fastnar i väldigt små detaljer hur en viss metod är skriver, och frågan är hur stor skillnad det gör i det stora hela. Överlag tycker jag däremot det var hjälpsamt att se över min kod och få ett hum om hur bra/dålig den är.</p>
    </article>
</main>
{% endblock %}